# -*- coding: utf-8 -*-
"""8.Pandas

# 1. PANDAS BASICS
"""

# Pandas is a data manipulation and analysis tool that is built on Numpy.
# Pandas uses a data structure known as DataFrame (think of it as Microsoft excel in Python). 
# DataFrames empower programmers to store and manipulate data in a tabular fashion (rows and columns).
# Series Vs. DataFrame? Series is considered a single column of a DataFrame.



# Let's define two lists as shown below:







# Let's create a one dimensional Pandas "series" 
# Note that series is formed of data and associated labels

# Let's view the series

# Let's obtain the datatype

# Let's define a two-dimensional Pandas DataFrame
# Note that you can create a pandas dataframe from a python dictionary

# Let's obtain the data type

# you can only view the first couple of rows using .head()

# you can only view the last couple of rows using .tail()

"""**MINI CHALLENGE #1:**
- **A porfolio contains a collection of securities such as stocks, bonds and ETFs. Define a dataframe named 'portfolio_df' that holds 3 different stock ticker symbols, number of shares, and price per share (feel free to choose any stocks)**
- **Calculate the total value of the porfolio including all stocks**
"""





"""# 2. PANDAS WITH CSV AND HTML DATA"""

# In order to access data on Google Drive, you need to mount the drive to access it's content

# Pandas is used to read a csv file and store data in a DataFrame



# write to a csv file without an index

# write to a csv file with an index

# Read tabular data using read_html





"""**MINI CHALLENGE #2:**
- **Write a code that uses Pandas to read tabular US retirement data**
- **You can use data from here: https://www.ssa.gov/oact/progdata/nra.html** 
"""



"""# 3. PANDAS OPERATIONS"""

# Let's define a dataframe as follows:

# Pick certain rows that satisfy a certain criteria

# Delete a column from a DataFrame

"""**MINI CHALLENGE #3:**
- **Using "bank_client_df" DataFrame, leverage pandas operations to only select high networth individuals with minimum $5000** 
- **What is the combined networth for all customers with 5000+ networth?**
"""





"""# 4. PANDAS WITH FUNCTIONS"""

# Let's define a dataframe as follows:

# Define a function that increases all clients networth (stocks) by a fixed value of 10% (for simplicity sake)

# You can apply a function to the DataFrame





"""**MINI CHALLENGE #4:**
- **Define a function that doubles stock prices and adds $100**
- **Apply the function to the DataFrame**
- **Calculate the updated total networth of all clients combined**
"""









"""# 5. SORTING AND ORDERING"""

# Let's define a dataframe as follows:

# You can sort the values in the dataframe according to number of years with bank

# Note that nothing changed in memory! you have to make sure that inplace is set to True

# Set inplace = True to ensure that change has taken place in memory

# Note that now the change (ordering) took place

"""**MINI CHALLENGE #5:**
- **Sort customers by networth instead of years with bank. Make sure to update values in-memory.**
"""



"""# 6. CONCATENATING AND MERGING WITH PANDAS

Check this out: https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html
"""















# Creating a dataframe from a dictionary
# Let's define a dataframe with a list of bank clients with IDs = 1, 2, 3, 4, 5



# Let's define another dataframe for a separate list of clients (IDs = 6, 7, 8, 9, 10)

# Let's assume we obtained additional information (Annual Salary) about our bank customers 
# Note that data obtained is for all clients with IDs 1 to 10

# Let's concatenate both dataframes #1 and #2
# Note that we now have client IDs from 1 to 10

# Let's merge all data on 'Bank Client ID'



"""**MINI CHALLENGE #6:**
- **Let's assume that you became a new client to the bank**
- **Define a new DataFrame that contains your information such as client ID (choose 11), first name, last name, and annual salary.**
- **Add this new dataframe to the original dataframe "bank_df_all".** 
"""







"""# EXCELLENT JOB!

# MINI CHALLENGE SOLUTIONS

**MINI CHALLENGE #1 SOLUTION:**
- **A porfolio contains a collection of securities such as stocks, bonds and ETFs. Define a dataframe named 'portfolio_df' that holds 3 different stock ticker symbols, number of shares, and price per share (feel free to choose any stocks)**
- **Calculate the total value of the porfolio including all stocks**
"""

portfolio_df = pd.DataFrame({'stock ticker symbols':['AAPL', 'AMZN', 'T'],
                             'price per share [$]':[3500, 200, 40], 
                             'Number of stocks':[3, 4, 9]})
portfolio_df

stocks_dollar_value = portfolio_df['price per share [$]'] * portfolio_df['Number of stocks']
print(stocks_dollar_value)
print('Total portfolio value = {}'.format(stocks_dollar_value.sum()))

"""**MINI CHALLENGE #2 SOLUTION:**
- **Write a code that uses Pandas to read tabular US retirement data**
- **You can use data from here: https://www.ssa.gov/oact/progdata/nra.html** 
"""

# Read tabular data using read_html
retirement_age_df = pd.read_html('https://www.ssa.gov/oact/progdata/nra.html')
retirement_age_df

"""**MINI CHALLENGE #3 SOLUTION:**
- **Using "bank_client_df" DataFrame, leverage pandas operations to only select high networth individuals with minimum $5000** 
- **What is the combined networth for all customers with 5000+ networth?**
"""

df_high_networth = bank_client_df[ (bank_client_df['Net worth [$]'] >= 5000) ]
df_high_networth

df_high_networth['Net worth [$]'].sum()



"""**MINI CHALLENGE #4 SOLUTION:**
- **Define a function that doubles stock prices and adds $100**
- **Apply the function to the DataFrame**
- **Calculate the updated total networth of all clients combined**
"""

def networth_update(balance):
    return balance * 2 + 100 # assume that stock prices increased by 10%

# You can apply a function to the DataFrame 
results = bank_client_df['Net worth [$]'].apply(networth_update)
results

results.sum()

"""**MINI CHALLENGE #5 SOLUTION:**
- **Sort customers by networth instead of years with bank. Make sure to update values in-memory.**
"""

# You can sort the values in the dataframe according to number of years with bank
bank_client_df.sort_values(by = 'Net worth [$]', inplace = True) 
bank_client_df

"""**MINI CHALLENGE #6 SOLUTION:**
- **Let's assume that you became a new client to the bank**
- **Define a new DataFrame that contains your information such as client ID (choose 11), first name, last name, and annual salary.**
- **Add this new dataframe to the original dataframe "bank_df_all".** 
"""

new_client = {
        'Bank Client ID': ['11'],
        'First Name': ['Ry'], 
        'Last Name': ['Aly'],
        'Annual Salary [$/year]' : [1000]}
new_client_df = pd.DataFrame(new_client, columns = ['Bank Client ID', 'First Name', 'Last Name', 'Annual Salary [$/year]'])
new_client_df

new_df = pd.concat([bank_df_all, new_client_df], axis = 0)
new_df