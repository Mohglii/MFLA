# """4. Python 101 - For While Loops, Range, List Comprehension





# # 1. FOR LOOPS
# """

# """# For loops are used for iterating over a sequence (a list, a tuple, a dictionary, a set, or a string).
# # An action can be executed once for each item in a list, tuple of the for loop."""

# """# # you can do more than one task for every loop such as printing out 'Hello world'"""
# #-------------------------------------------------
# mylist2 =[1,2,3]
# qwert= []
# for a in mylist2:
#         b= a+1 
#         c = b**3 + 9 *20

#         mylist3 = []
#         mylist3 = c
#         qwert.append(mylist3)
# print(qwert)
# #-------------------------------------------------
# mylist = [1,2,3]
# for a in mylist:
#         print(a)

# for i in mylist:
#         print(i)
#         print('this is a loop using a forloop stmt')
# #-------------------------------------------------
# """ Defind a list of string """

# mylist3= ['aapl', ',goog', 'tesla', 'bmw']

# for i in mylist3:
#         print(i)

# for i in 'tsla':
#         print(i)

# """**MINI CHALLENGE #1:**
# # - **Write a code that takes in a string and prints it out on the screen except for any letter 'T'. You can replace the letter 'T' with '*'.**
# # """

# for i in 'tetragrammaton':
#         if i == "t":
#                 print('*')
#         else:
#                 print(i)
    


# """# 2. RANGE"""

# # Range() generates a list of numbers, which is used to iterate over with for loops.
# # range() is 0-index based, meaning list indexes start at 0, not 1. 
# # The last integer generated by range() is up to, but not including, last element. 
# # Example: range(0, 10) generates integers from 0 up to, but not including, 10.


# #-------------------------------------------------
# for i in range(6):
#         print(i)

# for num in range(2, 10):
#         print(num)

# for q in range(1, 20 , 2):
#         print(q)

# for r in reversed(range(5)):
#         print(r)
# #-------------------------------------------------


# """**MINI CHALLENGE #2:**
# - **Write a code that takes in the maximum and minimum limits from the user and prints out even numbers only between the provided range**
# """



 # #-------------------------------------------------
# min = int(input('min price'))
# max = int(input('max price'))

# for i in range(min,max):
#         if i%2 == 0:
#                 print(i)
# #-------------------------------------------------
# """**MINI CHALLENGE #3:**
# - **Write a code that generates the following table:**
# ```
# 1   1    1
# 2   4    8
# 3   9   27
# 4  16   64
# 5  25  125
# 6  36  216
# 7  49  343
# 8  64  512
# 9  81  729
# 10 100 1000
# ```

# #-------------------------------------------------
# numbers = [1, 2, 3, 4, 5, 6, 7, 8, ]
# for i in range(len(numbers)):
#         print(f'{i}, {i*i}, {i*i*i}')
# #-------------------------------------------------


# #-------------------------------------------------
# # 3. WHILE LOOPS
# """

# # While loop can be used to execute a set of statements as long as a certain condition holds true.
# i = 0

# while i <=15:
#     print(i)
#     i=i+1



# """**MINI CHALLENGE #4:**
# - **Write a code that displays numbers from 1 to 30 using for and while loops**
# w = 0 

# while w <=30:
#     print(w)
#     w=w+1


# """

# """**MINI CHALLENGE #5:**
# - **Create a rolling dice game that assume we have two dice (#1 and #2).
# The dice is being thrown and a random number is generated everytime.
# The game should be designed such that it prompts the user to ask if he/she would like to keep playing or exit the game.**
# """

# import random
# keep_rolling = "y"

# while keep_rolling == "y":
#     print('dice is rolling....')
#     print('dice 1:', random.randint(1,6))
#     print('dice 2:', random.randint(1,6))

#     keep_rolling = input('do u want to roll again?')

# #-------------------------------------------------

# #-------------------------------------------------

# """# 4. BREAK A LOOP"""

# # break() is used to exit a for loop or a while loop
# # continue() is used to skip the current block, and return to the "for" or "while" statement.

# # print out all elements in the list
# # print out all elements in the list up until the AT&T stock (Ticker Symbol = T) is detected

# lists = ['goog','aapl','t', 'sp500']

# for i in lists:
#     print(i)
#     if i == 't':
#         break

# # # Print only odd elements and skip even numbers
# my_lists = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# for i in my_lists:
#     if i%2 == 0:
#         continue
#     print(i)


# """**MINI CHALLENGE #6:**
# - **Write a code that continiously gets data from the user and calculates the average and print out on the screen. The code exits when the user enters 'e'.**
# """
# #-------------------------------------------------




# #-------------------------------------------------
# """# 5. NESTED LOOPS"""

# # Nested loops are loops that exist inside the body of another loop
# for x in range(1, 4): #outer loop
#     for y in range(1,11): #inner loop 
#         print('{} * {} = {}' .format(x,y,x*y))


# """**MINI CHALLENGE #7:**
# - **Write a code that takes in a number (range between 1 and 9) from the user and print out the multiplication table up until that number.**
# """

# number = int(input(' enter a number between 1 and 9: '))

# for i in range(1, number + 1):
#     for y in range(1,11):
#         print('{} * {} = {}' .format(i, y, i*y))


# color = ['black','gold','green']
# phone = ['iphone', 'samsung', 'oneplus']

# for x in color:
#     for y in phone:
#         print(x,y)


# number = int(input('Enter a number: '))

# for q in range(1, number+1):
#     for z in range(1, number):
#         print('{}+{}={}' .format(q,z,q*z))
# #-------------------------------------------------

# #-------------------------------------------------
# """# 6. LIST COMPREHENSION"""


# # List comprehension is an elegant tool to transform one list into another list. 
# # Instead of using loops and append, list comprehension is used to iterate over a list, condition its elements and include them in a new list.
# # Let's take a look at the traditional way of taking a list and squaring its elements


# ilist = [1,2,3,4]
# olist = []
# for i in ilist
#     olist.append(i **2)
# print(olist)
# olist = [element **2   for element in ilist]
# print(olist)


alist = [1,2,3,4,5,6,7,8,9,10,11,12]
blist = []

for i in alist:
    if i%2 ==0:
        blist.append(i**2)
print(blist)
 
#how to use list comprehension to execute using less code 
clist = [element **2 for element in alist if element%3==0]
print(clist)

#list comprehension = [3) output into var <---------- 1)for loop -------->   2)conditional stmt than <------3)]

# # List comprehension is a super powerful one line of code!

# # Let's square even numbers only 
# # We need to insert a condition

# # All this could be done with one line of code as well using List Comprehension




# """**MINI CHALLENGE #8:**
# - **Write a code that takes in a list of prices of a stock for the past 7 days and then normalize the prices** 
# """

print('enter a list of past 5 days price separated by space')

price = [ int(x) for x in input ().split()]

prices = [i/price[0] for i in price ]
print("original prices = {} \n Normalized prices = {}." .format(price,prices))


                                                                                         #normalizing stock/fx prices can be used to compare one another. 

#                                                normalization of prices is taking prices stocks over a period of time and determining what happened to the stock. increase or decrease? 

# #-------------------------------------------------




















# """# MINI CHALLENGE SOLUTION

# **MINI CHALLENGE #1:**
# - **Write a code that takes in a string and prints it out on the screen except for any letter 'T'. You can replace the letter 'T' with '*'.**
# """

# for letter in 'TSLA':
#   if letter == 'T':
#     print('*')
#   else:
#    print(letter)

# """**MINI CHALLENGE #2 SOLUTION:**
# - **Write a code that takes in the maximum and minimum limits from the user and prints out even numbers only between the provided range**
# """

# min = int(input("Enter the price (lower bound: "))
# max = int(input("Enter the price (Upper bound: "))

# for i in range(min, max):
#     if i%2 == 0: 
#         print(i)

# """**MINI CHALLENGE #3 SOLUTION:**
# - **Write a code that generates the following table:**
# ```
# 1   1    1
# 2   4    8
# 3   9   27
# 4  16   64
# 5  25  125
# 6  36  216
# 7  49  343
# 8  64  512
# 9  81  729
# 10 100 1000
# ```

# """

# for x in range(1, 11):
#     print('{} {} {}'.format(x, x*x, x*x*x))

# """**MINI CHALLENGE #4 SOLUTION:**
# - **Write a code that displays numbers from 1 to 30 (including 30) using for and while loops**
# """

# i = 1
# while (i < 31):
#   print (i)
#   i = i+1

# for i in range(1, 31):
#     print(i)

# """**MINI CHALLENGE #5 SOLUTION:**
# - **Create a rolling dice game that assume we have two dice (#1 and #2). The dice is being thrown and a random number is generated everytime. The game should be designed such that it prompts the user to ask if he/she would like to keep playing or exit the game.**
# """

# import random

# keep_rolling = "y"

# while keep_rolling == "y":
#     print("Rolling the dices, please wait!...")
#     print("Rolling results for Dice #1:", random.randint(1, 6))
#     print("Rolling results for Dice #2:", random.randint(1, 6))

#     keep_rolling = input("Do you want to roll again?")
# 
# """**MINI CHALLENGE #6 SOLUTION:**
# - **Write a code that continiously gets data from the user and calculates the average and print out on the screen. The code exits when the user enters 'e'.**
# """

# print("Keep entering numbers and I will display the average to you!")
# avg = 0
# n = 0
# while True:
#     x = input("Enter a number: ")
    
#     # Check if the user wants to exit (i.e.: break the loop)
#     if x == 'e':
#       break
    
#     x = int(x)
#     n = n + 1
    
#     avg =   ((avg * (n - 1) ) + x) / n
#     print ("The current average is ", avg)

# """**MINI CHALLENGE #7 SOLUTION:**
# - **Write a code that takes in a number (range between 1 and 9) from the user and print out the multiplication table up until that number.**
# """

# number = int(input("Enter a number between 1 and 9: "))

# for x in range(1, number+1): # slow loop 
#   for y in range(1, 11):   # fast loop
#    print('{} x {} = {}'.format(x, y, x*y))

# """**MINI CHALLENGE #8 SOLUTION:**
# - **Write a code that takes in a list of prices of a stock for the past 7 days and then normalize the prices** 
# """

# print('Enter a list of past 7-days prices separated by a space:')
# prices = [int(x) for x in input().split()]

# normalized_prices = [ (i/prices[0]) for i in prices]
# print('Orginal Prices: {}\nNormalized Prices: {}\n'.format(prices, normalized_prices)
